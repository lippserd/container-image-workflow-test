name: Build and Publish Container Image

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  release:
    types:
      - published

env:
  IMAGE_NAME: ${{ github.repository }}

  # The LATEST variable determines if the current release tag is the greatest tag overall.
  # If true, the container image will be tagged as 'latest' when pushed to the container registries.
  LATEST: false

  # The LATEST_MAJOR variable determines if the current release tag is the greatest within its major version.
  # If true, the container image will be tagged with the major version (e.g., '1') when pushed to the registries.
  LATEST_MAJOR: false

jobs:
  build-and-publish-container-image:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      # Explicitly using the checkout action (instead of relying on docker/build-push-action to do it implicitly)
      # because we need to fetch all tags.
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # Switch to fetch-tags: true once https://github.com/actions/checkout/issues/1467 is fixed.
          fetch-depth: 0

      # Updates env.LATEST and env.LATEST_MAJOR based on
      # whether the current release tag is the greatest overall and/or
      # within its major version.
      - name: Prepare metadata (release tags)
        if: github.event_name == 'release' && github.event.action == 'published'
        run: |
          # Retrieve the greatest existing tag in the repository by sorting tags in descending order.
          # Options used:
          # * --sort=-v:refname sorts tags as versions, placing the highest version at the top.
          # * -c 'versionsort.suffix=-' ensures that pre-release tags (e.g., 1.0.0-rc1) are sorted correctly,
          #   so they are not considered greater than their corresponding final release (e.g., 1.0.0).
          # Intentionally not using head -1 to prevent potential broken pipe errors.
          greatest_tag=$(git -c 'versionsort.suffix=-' tag --list --sort=-v:refname | awk 'NR<=1')

          if [ "${{ github.ref_name }}" = "$greatest_tag" ]; then
            echo "The current tag ${{ github.ref_name }} is the greatest overall. Tagging as 'latest'."

            # Update environment variable to enable tagging as 'latest'.
            echo "LATEST=true" >> $GITHUB_ENV
          else
            echo "The current tag ${{ github.ref_name }} is not the greatest overall compared to $greatest_tag. Not tagging as 'latest'."
          fi


          major_version=$(echo ${{ github.ref_name }} | cut -d. -f1)
          greatest_major=$(git -c 'versionsort.suffix=-' tag --list "${major_version}.*" --sort=-v:refname | awk 'NR<=1')
          if [ "${{ github.ref_name }}" = "$greatest_major" ]; then
            echo "The current tag ${{ github.ref_name }} is the greatest within its major version. Tagging with major version ${major_version#v}."

            # Update environment variable to enable tagging with major version.
            echo "LATEST_MAJOR=true" >> $GITHUB_ENV
          else
            echo "The current tag ${{ github.ref_name }} is not the greatest within its major version compared to $greatest_major. Not tagging with major version ${major_version#v}."
          fi

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ env.IMAGE_NAME }}
          flavor: |
            # Disable automatic 'latest' tagging as our custom logic is used to
            # determine when to apply the 'latest' tag.
            latest=false
          tags: |
            type=edge
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}},enable=${{ env.LATEST_MAJOR }}
            type=raw,value=latest,enable=${{ env.LATEST }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Container image
        id: build-and-push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Containerfile
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}

          provenance: false
